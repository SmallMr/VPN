parsers: # array 更新于 2023 https://docs.cfw.lbyczf.com/contents/parser.html
# - reg: ^.*$ 匹配所有订阅，或用下面 - url: 指定订阅，二选其一
  - reg: ^.*$
    yaml:
      mix-rule-providers:
        reject:
            type: http
            behavior: domain
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/reject.txt"
            path: ./ruleset/reject.yaml
            interval: 86400
        icloud:
            type: http
            behavior: domain
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/icloud.txt"
            path: ./ruleset/icloud.yaml
            interval: 86400
        apple:
            type: http
            behavior: domain
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/apple.txt"
            path: ./ruleset/apple.yaml
            interval: 86400
        google:
            type: http
            behavior: domain
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/google.txt"
            path: ./ruleset/google.yaml
            interval: 86400
        proxy:
            type: http
            behavior: domain
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/proxy.txt"
            path: ./ruleset/proxy.yaml
            interval: 86400
        direct:
            type: http
            behavior: domain
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/direct.txt"
            path: ./ruleset/direct.yaml
            interval: 86400
        private:
            type: http
            behavior: domain
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/private.txt"
            path: ./ruleset/private.yaml
            interval: 86400
        gfw:
            type: http
            behavior: domain
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/gfw.txt"
            path: ./ruleset/gfw.yaml
            interval: 86400
        tld-not-cn:
            type: http
            behavior: domain
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/tld-not-cn.txt"
            path: ./ruleset/tld-not-cn.yaml
            interval: 86400
        telegramcidr:
            type: http
            behavior: ipcidr
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/telegramcidr.txt"
            path: ./ruleset/telegramcidr.yaml
            interval: 86400
        cncidr:
            type: http
            behavior: ipcidr
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/cncidr.txt"
            path: ./ruleset/cncidr.yaml
            interval: 86400
        lancidr:
            type: http
            behavior: ipcidr
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/lancidr.txt"
            path: ./ruleset/lancidr.yaml
            interval: 86400
        applications:
            type: http
            behavior: classical
            url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/applications.txt"
            path: ./ruleset/applications.yaml
            interval: 86400
      prepend-rules:
        # rules 最前面增加自定义个人的规则
        - DOMAIN, translate.googleapis.com, ✈️ PROXY
        # 白名单模式 
        - RULE-SET,applications,DIRECT
        - DOMAIN,clash.razord.top,DIRECT
        - DOMAIN,yacd.haishan.me,DIRECT
        - RULE-SET,private,DIRECT
        - RULE-SET,reject,REJECT
        - RULE-SET,icloud,DIRECT
        - RULE-SET,apple,DIRECT
        #- RULE-SET,google,DIRECT   # [慎用]Google 在中国大陆可直连的域名列表 google.txt
        - RULE-SET,proxy,✈️ PROXY
        - RULE-SET,direct,DIRECT
        - RULE-SET,lancidr,DIRECT
        - RULE-SET,cncidr,DIRECT
        - RULE-SET,telegramcidr,✈️ PROXY
        - GEOIP,LAN,DIRECT
        - GEOIP,CN,DIRECT
        - MATCH,✈️ PROXY
    code: |
      module.exports.parse = (raw, { yaml }) => {
        const rawObj = yaml.parse(raw)
      
        // 清空 rules 和 proxy-groups
        rawObj.rules = []
        rawObj['proxy-groups'] = []
      
        // 提取订阅链接中的节点列表
        const proxies = rawObj.proxies.map(proxy => proxy.name)
      
        // 过滤掉带有特定字样的节点
        const filteredProxiesPROXY = proxies.filter(proxy => !proxy.includes('50') && !proxy.includes('账号') && !proxy.includes('账号'))
        const filteredProxiesOpenAI = proxies.filter(proxy => !proxy.includes('50') && !proxy.includes('账号') && !proxy.includes('账号') && !proxy.includes('HK'))
        const filteredProxiesAutoSelect = proxies.filter(proxy => !proxy.includes('50') && !proxy.includes('20') && !proxy.includes('账号') && !proxy.includes('账号'))
        const filteredProxiesHighRate = proxies.filter(proxy => proxy.includes('50') || proxy.includes('20'))
      
        // 添加名为 "PROXY" 的项到 proxy-groups，过滤掉带有特定字样的节点
        rawObj['proxy-groups'].push({
          name: '✈️ PROXY',
          type: 'select',
          proxies: ['DIRECT', '🍊 OpenAI', '♻️ 自动选择', '🍀 高的倍率', ...filteredProxiesPROXY.filter(proxy => proxies.includes(proxy))]
        })
      
        // 添加名为 "🍊 OpenAI" 的项到 proxy-groups，过滤掉带有特定字样的节点
        rawObj['proxy-groups'].push({
          name: '🍊 OpenAI',
          type: 'select',
          proxies: filteredProxiesOpenAI
        })
      
        // 添加名为 "♻️ 自动选择" 的项到 proxy-groups，过滤掉带有特定字样的节点
        rawObj['proxy-groups'].push({
          name: '♻️ 自动选择',
          type: 'url-test',
          url: 'http://www.gstatic.com/generate_204',
          interval: 300,
          proxies: filteredProxiesAutoSelect
        })
        
        // 添加名为 "🍀 高的倍率" 的项到 proxy-groups，过滤为仅使用 50，20 这种高倍率的带有特定字样的节点
        rawObj['proxy-groups'].push({
          name: '🍀 高的倍率',
          type: 'select',
          proxies: filteredProxiesHighRate
        })
      
        return yaml.stringify(rawObj)
      }